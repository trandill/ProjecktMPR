package baza;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import Wypozyczalnie_samochodow.*;

public class SamochodyBazaMgr {
	
	private Connection polaczenie;
	private Statement statement;
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	private String stworzTabeleSamochod = "CREATE TABLE Samochod(id bigint GENERATED BY DEFAULT AS IDENTITY(start with 1) PRIMARY KEY," +
										"nazwa varchar(20), marka varchar(20))";
	private PreparedStatement dodajSamochodStmt;
	private PreparedStatement usunSamochodStmt;
	private PreparedStatement usunWszystkieSamochodyStmt;
	private PreparedStatement pobierzWszystkieSamochodyStmt;
	private PreparedStatement pobierzWszystkieSamochodyIDStmt;
	private PreparedStatement znajdzSamochodPoNazwieStmt;
	private PreparedStatement znajdzSamochodPoMarceStmt;
	
	public SamochodyBazaMgr() {
	try {
		polaczenie = DriverManager.getConnection(url);
		statement = polaczenie.createStatement();

		ResultSet rs = polaczenie.getMetaData().getTables(null, null, null, null);
		boolean tableExists = false;
		
		while (rs.next()) {
			if ("Samochod".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
				tableExists = true;
				break;
			} 
		}
	

		if (!tableExists) statement.executeUpdate(stworzTabeleSamochod);

		dodajSamochodStmt = polaczenie.prepareStatement("INSERT INTO Samochod (title, author) VALUES (?, ?)");
		znajdzSamochodPoNazwieStmt = polaczenie.prepareStatement("SELECT id FROM Samochod WHERE title= ?");
		znajdzSamochodPoMarceStmt = polaczenie.prepareStatement("SELECT id FROM Samochod WHERE author= ?");
		usunSamochodStmt = polaczenie.prepareStatement("DELETE FROM Samochod WHERE id = ?");
		usunWszystkieSamochodyStmt = polaczenie.prepareStatement("DELETE FROM Samochod");
		pobierzWszystkieSamochodyStmt = polaczenie.prepareStatement("SELECT id, title, author FROM Samochod");
		pobierzWszystkieSamochodyIDStmt = polaczenie.prepareStatement("SELECT id from Samochod");
	} catch (SQLException e) {
		e.printStackTrace();
		}
	}

	Connection getConnection() {
		return polaczenie;
	}

	void clearAllBooks() {
		try {
			usunWszystkieSamochodyStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int dodajSamochod(Samochod b) {
		int count = 0;
		try {
			dodajSamochodStmt.setString(1, b.pobierzNazwa());
			dodajSamochodStmt.setString(2, b.poberzMarka());

			count = dodajSamochodStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	

	public List<Samochod> getAllBooks() {
		List<Samochod> samochodLista = new ArrayList<Samochod>();

		try {
			ResultSet rs = pobierzWszystkieSamochodyStmt.executeQuery();

			while (rs.next()) {
				Samochod b = new Samochod();
				b.ustawID(rs.getInt("ID"));
				b.ustawNazwe(rs.getString("nazwa"));
				b.ustawMarka(rs.getString("marka"));
				samochodLista.add(b);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return samochodLista;
	}
	
	public void deleteAllBooks() {
		try {
			usunWszystkieSamochodyStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public List<Integer> getAllBooksID() {
		List<Integer> samochodLista = new ArrayList<Integer>();
		
		try {
			ResultSet rs = pobierzWszystkieSamochodyIDStmt.executeQuery();
			while (rs.next())
				samochodLista.add(rs.getInt("ID"));
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return samochodLista;
	}
	
	public List<Integer> findBookByTitle(String title) {
		try {
			List<Integer> samochodLista = new ArrayList<Integer>();
			znajdzSamochodPoNazwieStmt.setString(1, title);
			ResultSet rs = znajdzSamochodPoNazwieStmt.executeQuery();
			while (rs.next())
				samochodLista.add(rs.getInt("ID"));
			return samochodLista;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public List<Integer> findBookByAuthor(String author) {
		try {
			List<Integer> result = new ArrayList<Integer>();
			znajdzSamochodPoMarceStmt.setString(1, author);
			ResultSet rs = znajdzSamochodPoMarceStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public void deleteBook(List<Integer> samochodLista) {
		try {
			for (Integer id : samochodLista) {
				usunSamochodStmt.setInt(1, id);
				usunSamochodStmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

}
