package baza;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import Wypozyczalnie_samochodow.*;

public class FirmaBazaMgr {
	
	private Connection polaczenie;
	private Statement statement;
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String tworzyTabeleFirma = "CREATE TABLE Firma(id bigint GENERATED BY DEFAULT AS IDENTITY(start with 1) PRIMARY KEY," +
										"Firma varchar(20), NIP varchar(20))";
	private PreparedStatement dodajFirmeStmt;
	private PreparedStatement usunWszystkieFirmyStmt;
	private PreparedStatement pobierzWsztskieFirmyStmt;
	private PreparedStatement pobierzWszystkieFirmIDStmt;
	private PreparedStatement pobierzFirmeStmt;
	private PreparedStatement usunFirmZListyStmt;
	private PreparedStatement znajdzNazweFirmyStmt;
	private PreparedStatement znajdzNIPFirmyStmt;
	List<Integer> listID = new ArrayList<Integer>();
	
	public FirmaBazaMgr() {
	try {
		polaczenie = DriverManager.getConnection(url);
		statement = polaczenie.createStatement();

		ResultSet rs = polaczenie.getMetaData().getTables(null, null, null, null);
		boolean tableExists = false;
		
		while (rs.next()) {
			if ("Firma".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
				tableExists = true;
				break;
			} 
		}
	

		if (!tableExists) statement.executeUpdate(tworzyTabeleFirma);

		dodajFirmeStmt = polaczenie.prepareStatement("INSERT INTO Firma (nazwaFirmy, NIP) VALUES (?, ?)");
		usunFirmZListyStmt = polaczenie.prepareStatement("DELETE FROM Firma WHERE id = ?");
		usunWszystkieFirmyStmt = polaczenie.prepareStatement("DELETE FROM Firma");
		pobierzFirmeStmt = polaczenie.prepareStatement("SELECT * FROM Firma WHERE id = ?");
		pobierzWsztskieFirmyStmt = polaczenie.prepareStatement("SELECT * FROM Firma");
		znajdzNazweFirmyStmt = polaczenie.prepareStatement("SELECT id FROM Firma WHERE name = ?");
		znajdzNIPFirmyStmt = polaczenie.prepareStatement("SELECT id FROM Firma WHERE surname = ?");
		pobierzWszystkieFirmIDStmt = polaczenie.prepareStatement("SELECT id FROM Firma");
		
		} catch (SQLException e) {
		e.printStackTrace();
		}
	}


	Connection pobierzPolaczenie() {
		return polaczenie;
	}

	public int dodajFirme(Firma c) {
		int count = 0;
		try {
			dodajFirmeStmt.setString(1, c.pobierzNazweFirmy());
			dodajFirmeStmt.setString(2, c.pobierzNIP());

			count = dodajFirmeStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public void pobierzFirme() {
		
		try {
			ResultSet rs = pobierzFirmeStmt.executeQuery();
			
			Firma c = new Firma();
			c.ustawID(rs.getInt("id"));
			c.ustawNazwefirmy(rs.getString("nazwaFirmy"));
			c.ustawNIP(rs.getString("NIP"));
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	};

	public List<Integer> pobierzWszystkieFirmyID() {
		List<Integer> firmaLista = new ArrayList<Integer>();
		try {
			ResultSet rs = pobierzWszystkieFirmIDStmt.executeQuery();
			while (rs.next())
				firmaLista.add(rs.getInt("id"));
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return firmaLista;
	}
	
	public List<Firma> pobierzWsztskieFirmy() {
		List<Firma> firmy = new ArrayList<Firma>();

		try {
			ResultSet rs = pobierzWsztskieFirmyStmt.executeQuery();

			while (rs.next()) {
				Firma c = new Firma();
				c.ustawID(rs.getInt("id"));
				c.ustawNazwefirmy(rs.getString("nazwaFirmy"));
				c.ustawNIP(rs.getString("NIP"));
				firmy.add(c);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return firmy;
	}
	
	
	public void usunFirmZListy(List<Integer> list) {
		try {
			for (Integer id : list) {
				usunFirmZListyStmt.setInt(1, id);
				usunFirmZListyStmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	} 
	
	public void usunWszystkieFirmy() {
		try {
			usunWszystkieFirmyStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public List<Integer> znajdzNazweFirmy(String firma) {
		try {
			List<Integer> firma1 = new ArrayList<Integer>();
			znajdzNazweFirmyStmt.setString(1, firma);
			ResultSet rs = znajdzNazweFirmyStmt.executeQuery();
			while (rs.next())
				firma1.add(rs.getInt("ID"));
			return firma1;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public List<Integer> znajdzNIPFirmy(String NIP) {
		try {
			List<Integer> firma1 = new ArrayList<Integer>();
			znajdzNIPFirmyStmt.setString(1, NIP);
			ResultSet rs = znajdzNIPFirmyStmt.executeQuery();
			while (rs.next())
				firma1.add(rs.getInt("ID"));
			return firma1;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	
/*
	// klasa anonimowa
	public void printCustomerWithCondition(List<Customer> CustomerList,
			Condition condition) {
		for (Customer customer : CustomerList) {
			if (condition.getCondition(customer)) {
				System.out.println("Name: " + customer.getName()
						+ "\tSurname: " + customer.getSurname());
			}
		}
	}
	*/
}

